name: PlexiChat Security Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  security-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: plexichat_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for security analysis
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety bandit semgrep
    
    - name: Set up test environment
      run: |
        export DATABASE_URL=postgresql://postgres:postgres@localhost:5432/plexichat_test
        export PLEXICHAT_ENV=testing
        export PLEXICHAT_SECRET_KEY=test-secret-key-for-ci
        python -c "from src.plexichat.core_system.database.manager import get_database_manager; import asyncio; asyncio.run(get_database_manager().initialize())"
    
    - name: Start PlexiChat server
      run: |
        export DATABASE_URL=postgresql://postgres:postgres@localhost:5432/plexichat_test
        export PLEXICHAT_ENV=testing
        python src/plexichat/main.py &
        sleep 10  # Wait for server to start
        curl -f http://localhost:8000/health || exit 1
      env:
        PLEXICHAT_PORT: 8000
    
    - name: Run dependency vulnerability scan
      run: |
        echo "üîç Scanning dependencies for vulnerabilities..."
        safety check --json --output safety-report.json || true
        if [ -f safety-report.json ]; then
          echo "üìä Safety scan completed"
          cat safety-report.json
        fi
    
    - name: Run static code analysis
      run: |
        echo "üîç Running static code analysis..."
        bandit -r src/plexichat/ -f json -o bandit-report.json || true
        if [ -f bandit-report.json ]; then
          echo "üìä Bandit scan completed"
          cat bandit-report.json
        fi
    
    - name: Run semantic code analysis
      run: |
        echo "üîç Running semantic code analysis..."
        semgrep --config=auto src/plexichat/ --json --output=semgrep-report.json || true
        if [ -f semgrep-report.json ]; then
          echo "üìä Semgrep scan completed"
          cat semgrep-report.json
        fi
    
    - name: Run automated security tests
      run: |
        echo "üîç Running automated security tests..."
        python -c "
        import asyncio
        import sys
        import os
        sys.path.append('src')
        
        from plexichat.core_system.security.automated_security_testing import get_automated_security_tester
        
        async def run_security_tests():
            tester = get_automated_security_tester()
            await tester.initialize()
            
            # Get current commit hash
            commit_hash = os.environ.get('GITHUB_SHA', 'unknown')
            branch = os.environ.get('GITHUB_REF_NAME', 'main')
            
            try:
                test_id = await tester.run_ci_cd_security_tests(commit_hash, branch)
                result = tester.get_test_result(test_id)
                
                if result:
                    print(f'‚úÖ Security tests completed: {test_id}')
                    print(f'üìä Vulnerabilities found: {len(result.vulnerabilities)}')
                    print(f'üö® Critical vulnerabilities: {result.critical_count}')
                    print(f'‚ö†Ô∏è  High severity vulnerabilities: {result.high_count}')
                    
                    # Print vulnerability details
                    for vuln in result.vulnerabilities:
                        print(f'  - {vuln.severity.name}: {vuln.title} in {vuln.affected_component}')
                    
                    # Fail if critical vulnerabilities found
                    if result.critical_count > 0:
                        print(f'‚ùå SECURITY TEST FAILED: {result.critical_count} critical vulnerabilities found')
                        sys.exit(1)
                    
                    print('‚úÖ Security tests passed')
                else:
                    print('‚ùå Security test failed - no results')
                    sys.exit(1)
                    
            except Exception as e:
                print(f'‚ùå Security test failed: {e}')
                sys.exit(1)
        
        asyncio.run(run_security_tests())
        "
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/plexichat_test
        PLEXICHAT_ENV: testing
    
    - name: Generate security report
      if: always()
      run: |
        echo "üìã Generating comprehensive security report..."
        python -c "
        import json
        import os
        from datetime import datetime
        
        # Combine all security scan results
        report = {
            'timestamp': datetime.now().isoformat(),
            'commit': os.environ.get('GITHUB_SHA', 'unknown'),
            'branch': os.environ.get('GITHUB_REF_NAME', 'main'),
            'scans': {}
        }
        
        # Load safety report
        if os.path.exists('safety-report.json'):
            with open('safety-report.json', 'r') as f:
                report['scans']['dependency_vulnerabilities'] = json.load(f)
        
        # Load bandit report
        if os.path.exists('bandit-report.json'):
            with open('bandit-report.json', 'r') as f:
                report['scans']['static_analysis'] = json.load(f)
        
        # Load semgrep report
        if os.path.exists('semgrep-report.json'):
            with open('semgrep-report.json', 'r') as f:
                report['scans']['semantic_analysis'] = json.load(f)
        
        # Save comprehensive report
        with open('security-report.json', 'w') as f:
            json.dump(report, f, indent=2)
        
        print('üìä Security report generated: security-report.json')
        "
    
    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json
          semgrep-report.json
          security-report.json
        retention-days: 30
    
    - name: Comment PR with security results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          let comment = '## üîí Security Test Results\n\n';
          
          // Check if security report exists
          if (fs.existsSync('security-report.json')) {
            const report = JSON.parse(fs.readFileSync('security-report.json', 'utf8'));
            
            comment += `**Commit:** ${report.commit}\n`;
            comment += `**Branch:** ${report.branch}\n`;
            comment += `**Timestamp:** ${report.timestamp}\n\n`;
            
            // Dependency vulnerabilities
            if (report.scans.dependency_vulnerabilities) {
              const depVulns = report.scans.dependency_vulnerabilities;
              comment += `### üì¶ Dependency Vulnerabilities\n`;
              comment += `Found ${depVulns.length} vulnerable dependencies\n\n`;
            }
            
            // Static analysis
            if (report.scans.static_analysis) {
              const staticResults = report.scans.static_analysis;
              comment += `### üîç Static Code Analysis\n`;
              comment += `Found ${staticResults.results?.length || 0} potential issues\n\n`;
            }
            
            comment += '‚úÖ Automated security tests completed successfully!\n';
          } else {
            comment += '‚ùå Security tests failed to generate report\n';
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
    
    - name: Fail on critical vulnerabilities
      if: always()
      run: |
        # Check if any critical vulnerabilities were found
        if [ -f safety-report.json ]; then
          CRITICAL_COUNT=$(python -c "
          import json
          try:
              with open('safety-report.json', 'r') as f:
                  data = json.load(f)
                  print(len([v for v in data if v.get('severity', '').lower() == 'critical']))
          except:
              print(0)
          ")
          
          if [ "$CRITICAL_COUNT" -gt 0 ]; then
            echo "‚ùå CRITICAL SECURITY VULNERABILITIES FOUND: $CRITICAL_COUNT"
            echo "üö´ Blocking deployment due to critical security issues"
            exit 1
          fi
        fi
        
        echo "‚úÖ No critical security vulnerabilities found"
    
    - name: Cleanup
      if: always()
      run: |
        # Stop PlexiChat server
        pkill -f "python src/plexichat/main.py" || true
        
        # Clean up test data
        rm -f *.log
        rm -f test_*.db
